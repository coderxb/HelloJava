package com.china.gavin.db.derby;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class UserDlo {
	/**
	 * create table
	 * 
	 * @param connection
	 * @throws SQLException
	 */
	public void createTable(Connection conn) throws SQLException {
		Statement statement = conn.createStatement();
		String sql = "create table USERS("
				+ " ID   BIGINT  not null generated by default as identity,"
				+ "   USER_NAME            VARCHAR(20)  not null,"
				+ "   PASSWORD             VARCHAR(20),"
				+ "   constraint P_KEY_1 primary key (ID))";
		statement.execute(sql);

		sql = "create unique index USER_NAME_INDEX on USERS ("
				+ "   USER_NAME            ASC)";
		statement.execute(sql);
		statement.close();
		conn.commit();
	}

	public void insertUser(User user) {
		Connection connection = null;

		try {
			connection = DerbyConnUtils.getConnection();
			PreparedStatement statement = connection
					.prepareStatement("insert into users (user_name,password) values(?,?)");

			int index = 1;
			statement.setString(index++, user.getUserName());
			statement.setString(index++, user.getPassword());

			statement.execute();

			user.setId(this.getId(connection));

			connection.commit();
		} catch (SQLException e) {
			DerbyConnUtils.rollback(connection);
			throw new RuntimeException(e);
		} finally {
			if (connection != null) {
				DerbyConnUtils.close(connection);
			}
		}
	}

	public Long getId(Connection connection) throws SQLException {
		CallableStatement callableStatement = connection
				.prepareCall("values identity_val_local()");

		ResultSet resultSet = callableStatement.executeQuery();
		resultSet.next();
		Long id = resultSet.getLong(1);
		resultSet.close();
		callableStatement.close();
		return id;
	}

	public void update(User user) {
		Connection connection = null;

		try {
			connection = DerbyConnUtils.getConnection();
			PreparedStatement statement = connection
					.prepareStatement("update users set user_name=?,password=? where id=?");

			int index = 1;
			statement.setString(index++, user.getUserName());
			statement.setString(index++, user.getPassword());
			statement.setLong(index++, user.getId());

			statement.execute();

			connection.commit();
		} catch (SQLException e) {
			DerbyConnUtils.rollback(connection);
			throw new RuntimeException(e);
		} finally {
			if (connection != null) {
				DerbyConnUtils.close(connection);
			}
		}
	}

	public void delete(Long id) {
		Connection connection = null;

		try {
			connection = DerbyConnUtils.getConnection();
			PreparedStatement statement = connection
					.prepareStatement("delete from users where id=?");
			statement.setLong(1, id);
			statement.execute();
			connection.commit();
		} catch (SQLException e) {
			DerbyConnUtils.rollback(connection);
			throw new RuntimeException(e);
		} finally {
			if (connection != null) {
				DerbyConnUtils.close(connection);
			}
		}
	}

	public User findById(Long id) {
		Connection connection = null;

		try {
			connection = DerbyConnUtils.getConnection();

			PreparedStatement statement = connection
					.prepareStatement("select user_name,password from users where id=?");
			statement.setLong(1, id);
			ResultSet resultSet = statement.executeQuery();

			User user = null;

			if (resultSet.next()) {
				user = new User();
				user.setId(id);
				user.setUserName(resultSet.getString("user_name"));
				user.setPassword(resultSet.getString("password"));
			}

			resultSet.close();
			statement.close();
			connection.commit();
			return user;
		} catch (SQLException e) {
			throw new RuntimeException(e);
		} finally {
			if (connection != null) {
				DerbyConnUtils.close(connection);
			}
		}
	}
}
